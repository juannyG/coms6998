/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  31337: {
    Reputation: {
      address: "0x5fbdb2315678afecb367f032d93f642f64180aa3",
      abi: [
        {
          type: "constructor",
          inputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "allowance",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "approve",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "balanceOf",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "decimals",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "downvoteComment",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "downvotePost",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "engagementReward",
          inputs: [
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "name",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "revertDownvotePost",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "revertUpvotePost",
          inputs: [
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setPostsContract",
          inputs: [
            {
              name: "_addr",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setSpotlightContract",
          inputs: [
            {
              name: "_addr",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "spotlightContract",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "symbol",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "totalSupply",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "transfer",
          inputs: [
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "upvoteComment",
          inputs: [
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "upvotePost",
          inputs: [
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "Approval",
          inputs: [
            {
              name: "owner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "TokenBurned",
          inputs: [
            {
              name: "account",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "amount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "TokenIssued",
          inputs: [
            {
              name: "receiver",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "amount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "Transfer",
          inputs: [
            {
              name: "from",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "CannotIssueToZeroAddress",
          inputs: [],
        },
        {
          type: "error",
          name: "ERC20InsufficientAllowance",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "allowance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InsufficientBalance",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "balance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidApprover",
          inputs: [
            {
              name: "approver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidReceiver",
          inputs: [
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSender",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSpender",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "OnlySpotlightContractCanBurnTokens",
          inputs: [],
        },
        {
          type: "error",
          name: "OnlySpotlightContractCanIssueTokens",
          inputs: [],
        },
        {
          type: "error",
          name: "SpotlightAddressCannotBeZero",
          inputs: [],
        },
      ],
      inheritedFunctions: {
        allowance: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        approve: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        balanceOf: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        decimals: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        name: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        symbol: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        totalSupply: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        transfer: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        transferFrom: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
      },
    },
    Spotlight: {
      address: "0xe7f1725e7734ce288f8367e1bb143e90bb3f0512",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "_owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "_rtpContract",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "PAYWALL_COST",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "acceptPurchase",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "_purchaser",
              type: "address",
              internalType: "address",
            },
            {
              name: "_content",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "addComment",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "_content",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "createPost",
          inputs: [
            {
              name: "_title",
              type: "string",
              internalType: "string",
            },
            {
              name: "_content",
              type: "string",
              internalType: "string",
            },
            {
              name: "_nonce",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "_sig",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "_paywalled",
              type: "bool",
              internalType: "bool",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "declinePurchase",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "_purchaser",
              type: "address",
              internalType: "address payable",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "deletePost",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "deleteProfile",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "downvote",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "downvotedBy",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "_addr",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "editPost",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "newContent",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "getComments",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple[]",
              internalType: "struct PostLib.Comment[]",
              components: [
                {
                  name: "commenter",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "content",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "createdAt",
                  type: "uint256",
                  internalType: "uint256",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getCommunityPosts",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "tuple[]",
              internalType: "struct PostLib.Post[]",
              components: [
                {
                  name: "creator",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "title",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "content",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "id",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "signature",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "paywalled",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "nonce",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "createdAt",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "lastUpdatedAt",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "upvoteCount",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "downvoteCount",
                  type: "uint256",
                  internalType: "uint256",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPendingPurchases",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "tuple[]",
              internalType: "struct Posts.PendingPurchase[]",
              components: [
                {
                  name: "purchaser",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "postId",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "pubkey",
                  type: "string",
                  internalType: "string",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPost",
          inputs: [
            {
              name: "_post_sig",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct PostLib.Post",
              components: [
                {
                  name: "creator",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "title",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "content",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "id",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "signature",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "paywalled",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "nonce",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "createdAt",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "lastUpdatedAt",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "upvoteCount",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "downvoteCount",
                  type: "uint256",
                  internalType: "uint256",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPostsOfAddress",
          inputs: [
            {
              name: "_addr",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple[]",
              internalType: "struct PostLib.Post[]",
              components: [
                {
                  name: "creator",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "title",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "content",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "id",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "signature",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "paywalled",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "nonce",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "createdAt",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "lastUpdatedAt",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "upvoteCount",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "downvoteCount",
                  type: "uint256",
                  internalType: "uint256",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getProfile",
          inputs: [
            {
              name: "a",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct Spotlight.Profile",
              components: [
                {
                  name: "username",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "avatarCID",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "reputation",
                  type: "uint256",
                  internalType: "uint256",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPurchasedPost",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct PostLib.Post",
              components: [
                {
                  name: "creator",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "title",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "content",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "id",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "signature",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "paywalled",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "nonce",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "createdAt",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "lastUpdatedAt",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "upvoteCount",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "downvoteCount",
                  type: "uint256",
                  internalType: "uint256",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isPurchasePending",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isRegistered",
          inputs: [
            {
              name: "a",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "purchasePost",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "_pubkey",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "payable",
        },
        {
          type: "function",
          name: "registerProfile",
          inputs: [
            {
              name: "_username",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "updateAvatarCID",
          inputs: [
            {
              name: "_cid",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "updateUsername",
          inputs: [
            {
              name: "_newUsername",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "upvote",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "upvotedBy",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "_addr",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "event",
          name: "CommentAdded",
          inputs: [
            {
              name: "commenter",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "postId",
              type: "bytes",
              indexed: true,
              internalType: "bytes",
            },
            {
              name: "content",
              type: "string",
              indexed: false,
              internalType: "string",
            },
            {
              name: "createdAt",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "PostCreated",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "id",
              type: "bytes",
              indexed: true,
              internalType: "bytes",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "PostDeleted",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "id",
              type: "bytes",
              indexed: true,
              internalType: "bytes",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "PostDownvoted",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "id",
              type: "bytes",
              indexed: true,
              internalType: "bytes",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "PostEdited",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "id",
              type: "bytes",
              indexed: true,
              internalType: "bytes",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "PostPurchased",
          inputs: [
            {
              name: "purchaser",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "postId",
              type: "bytes",
              indexed: true,
              internalType: "bytes",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "PostUpvoted",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "id",
              type: "bytes",
              indexed: true,
              internalType: "bytes",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ProfileDeleted",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ProfileRegistered",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "username",
              type: "string",
              indexed: false,
              internalType: "string",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ProfileUpdated",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "newUsername",
              type: "string",
              indexed: false,
              internalType: "string",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "AddressNotRegistered",
          inputs: [],
        },
        {
          type: "error",
          name: "AlreadyDownvoted",
          inputs: [],
        },
        {
          type: "error",
          name: "AlreadyVoted",
          inputs: [],
        },
        {
          type: "error",
          name: "AvatarCIDCannotBeEmpty",
          inputs: [],
        },
        {
          type: "error",
          name: "CannotIssueToZeroAddress",
          inputs: [],
        },
        {
          type: "error",
          name: "CommentCannotBeEmpty",
          inputs: [],
        },
        {
          type: "error",
          name: "ContentCannotBeEmpty",
          inputs: [],
        },
        {
          type: "error",
          name: "CreatorCannotPayForOwnContent",
          inputs: [],
        },
        {
          type: "error",
          name: "InsufficentPostFunds",
          inputs: [],
        },
        {
          type: "error",
          name: "InvalidSignature",
          inputs: [],
        },
        {
          type: "error",
          name: "NoPendingPurchaseFound",
          inputs: [],
        },
        {
          type: "error",
          name: "OnlyCreatorCanAcceptPurchase",
          inputs: [],
        },
        {
          type: "error",
          name: "OnlyCreatorCanEdit",
          inputs: [],
        },
        {
          type: "error",
          name: "OnlyCreatorOrPurchaserCanDeclinePurchase",
          inputs: [],
        },
        {
          type: "error",
          name: "OnlySpotlightCanManagePosts",
          inputs: [],
        },
        {
          type: "error",
          name: "OnlySpotlightContractCanBurnTokens",
          inputs: [],
        },
        {
          type: "error",
          name: "OnlySpotlightContractCanIssueTokens",
          inputs: [],
        },
        {
          type: "error",
          name: "PostAlreadyPurchased",
          inputs: [],
        },
        {
          type: "error",
          name: "PostCreatorCannotBeZero",
          inputs: [],
        },
        {
          type: "error",
          name: "PostNotFound",
          inputs: [],
        },
        {
          type: "error",
          name: "PostNotPaywalled",
          inputs: [],
        },
        {
          type: "error",
          name: "ProfileAlreadyExist",
          inputs: [],
        },
        {
          type: "error",
          name: "ProfileNotExist",
          inputs: [],
        },
        {
          type: "error",
          name: "ReentrancyGuardReentrantCall",
          inputs: [],
        },
        {
          type: "error",
          name: "ReputationAddressCannotBeZero",
          inputs: [],
        },
        {
          type: "error",
          name: "SpotlightAddressCannotBeZero",
          inputs: [],
        },
        {
          type: "error",
          name: "TitleCannotBeEmpty",
          inputs: [],
        },
        {
          type: "error",
          name: "UsernameCannotBeEmpty",
          inputs: [],
        },
        {
          type: "error",
          name: "UsernameTaken",
          inputs: [],
        },
        {
          type: "error",
          name: "UsernameTooLong",
          inputs: [],
        },
      ],
      inheritedFunctions: {},
    },
  },
  31338: {
    Spotlight: {
      address: "0x5fbdb2315678afecb367f032d93f642f64180aa3",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "_owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "_rtpContract",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "PAYWALL_COST",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "acceptPurchase",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "_purchaser",
              type: "address",
              internalType: "address",
            },
            {
              name: "_content",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "addComment",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "_content",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "createPost",
          inputs: [
            {
              name: "_title",
              type: "string",
              internalType: "string",
            },
            {
              name: "_content",
              type: "string",
              internalType: "string",
            },
            {
              name: "_nonce",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "_sig",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "_paywalled",
              type: "bool",
              internalType: "bool",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "declinePurchase",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "_purchaser",
              type: "address",
              internalType: "address payable",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "deletePost",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "deleteProfile",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "downvote",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "downvotedBy",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "_addr",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "editPost",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "newContent",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "getComments",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple[]",
              internalType: "struct PostLib.Comment[]",
              components: [
                {
                  name: "commenter",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "content",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "createdAt",
                  type: "uint256",
                  internalType: "uint256",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getCommunityPosts",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "tuple[]",
              internalType: "struct PostLib.Post[]",
              components: [
                {
                  name: "creator",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "title",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "content",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "id",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "signature",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "paywalled",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "nonce",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "createdAt",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "lastUpdatedAt",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "upvoteCount",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "downvoteCount",
                  type: "uint256",
                  internalType: "uint256",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPendingPurchases",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "tuple[]",
              internalType: "struct Posts.PendingPurchase[]",
              components: [
                {
                  name: "purchaser",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "postId",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "pubkey",
                  type: "string",
                  internalType: "string",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPost",
          inputs: [
            {
              name: "_post_sig",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct PostLib.Post",
              components: [
                {
                  name: "creator",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "title",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "content",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "id",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "signature",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "paywalled",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "nonce",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "createdAt",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "lastUpdatedAt",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "upvoteCount",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "downvoteCount",
                  type: "uint256",
                  internalType: "uint256",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPostsOfAddress",
          inputs: [
            {
              name: "_addr",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple[]",
              internalType: "struct PostLib.Post[]",
              components: [
                {
                  name: "creator",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "title",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "content",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "id",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "signature",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "paywalled",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "nonce",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "createdAt",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "lastUpdatedAt",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "upvoteCount",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "downvoteCount",
                  type: "uint256",
                  internalType: "uint256",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getProfile",
          inputs: [
            {
              name: "a",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct Spotlight.Profile",
              components: [
                {
                  name: "username",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "avatarCID",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "reputation",
                  type: "uint256",
                  internalType: "uint256",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPurchasedPost",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct PostLib.Post",
              components: [
                {
                  name: "creator",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "title",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "content",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "id",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "signature",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "paywalled",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "nonce",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "createdAt",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "lastUpdatedAt",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "upvoteCount",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "downvoteCount",
                  type: "uint256",
                  internalType: "uint256",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isPurchasePending",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isRegistered",
          inputs: [
            {
              name: "a",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "purchasePost",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "_pubkey",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "payable",
        },
        {
          type: "function",
          name: "registerProfile",
          inputs: [
            {
              name: "_username",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "updateAvatarCID",
          inputs: [
            {
              name: "_cid",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "updateUsername",
          inputs: [
            {
              name: "_newUsername",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "upvote",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "upvotedBy",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "_addr",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "event",
          name: "CommentAdded",
          inputs: [
            {
              name: "commenter",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "postId",
              type: "bytes",
              indexed: true,
              internalType: "bytes",
            },
            {
              name: "content",
              type: "string",
              indexed: false,
              internalType: "string",
            },
            {
              name: "createdAt",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "PostCreated",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "id",
              type: "bytes",
              indexed: true,
              internalType: "bytes",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "PostDeleted",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "id",
              type: "bytes",
              indexed: true,
              internalType: "bytes",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "PostDownvoted",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "id",
              type: "bytes",
              indexed: true,
              internalType: "bytes",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "PostEdited",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "id",
              type: "bytes",
              indexed: true,
              internalType: "bytes",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "PostPurchased",
          inputs: [
            {
              name: "purchaser",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "postId",
              type: "bytes",
              indexed: true,
              internalType: "bytes",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "PostUpvoted",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "id",
              type: "bytes",
              indexed: true,
              internalType: "bytes",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ProfileDeleted",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ProfileRegistered",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "username",
              type: "string",
              indexed: false,
              internalType: "string",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ProfileUpdated",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "newUsername",
              type: "string",
              indexed: false,
              internalType: "string",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "AddressNotRegistered",
          inputs: [],
        },
        {
          type: "error",
          name: "AlreadyDownvoted",
          inputs: [],
        },
        {
          type: "error",
          name: "AlreadyVoted",
          inputs: [],
        },
        {
          type: "error",
          name: "AvatarCIDCannotBeEmpty",
          inputs: [],
        },
        {
          type: "error",
          name: "CannotIssueToZeroAddress",
          inputs: [],
        },
        {
          type: "error",
          name: "CommentCannotBeEmpty",
          inputs: [],
        },
        {
          type: "error",
          name: "ContentCannotBeEmpty",
          inputs: [],
        },
        {
          type: "error",
          name: "CreatorCannotPayForOwnContent",
          inputs: [],
        },
        {
          type: "error",
          name: "InsufficentPostFunds",
          inputs: [],
        },
        {
          type: "error",
          name: "InvalidSignature",
          inputs: [],
        },
        {
          type: "error",
          name: "NoPendingPurchaseFound",
          inputs: [],
        },
        {
          type: "error",
          name: "OnlyCreatorCanAcceptPurchase",
          inputs: [],
        },
        {
          type: "error",
          name: "OnlyCreatorCanEdit",
          inputs: [],
        },
        {
          type: "error",
          name: "OnlyCreatorOrPurchaserCanDeclinePurchase",
          inputs: [],
        },
        {
          type: "error",
          name: "OnlySpotlightCanManagePosts",
          inputs: [],
        },
        {
          type: "error",
          name: "OnlySpotlightContractCanBurnTokens",
          inputs: [],
        },
        {
          type: "error",
          name: "OnlySpotlightContractCanIssueTokens",
          inputs: [],
        },
        {
          type: "error",
          name: "PostAlreadyPurchased",
          inputs: [],
        },
        {
          type: "error",
          name: "PostCreatorCannotBeZero",
          inputs: [],
        },
        {
          type: "error",
          name: "PostNotFound",
          inputs: [],
        },
        {
          type: "error",
          name: "PostNotPaywalled",
          inputs: [],
        },
        {
          type: "error",
          name: "ProfileAlreadyExist",
          inputs: [],
        },
        {
          type: "error",
          name: "ProfileNotExist",
          inputs: [],
        },
        {
          type: "error",
          name: "ReentrancyGuardReentrantCall",
          inputs: [],
        },
        {
          type: "error",
          name: "ReputationAddressCannotBeZero",
          inputs: [],
        },
        {
          type: "error",
          name: "SpotlightAddressCannotBeZero",
          inputs: [],
        },
        {
          type: "error",
          name: "TitleCannotBeEmpty",
          inputs: [],
        },
        {
          type: "error",
          name: "UsernameCannotBeEmpty",
          inputs: [],
        },
        {
          type: "error",
          name: "UsernameTaken",
          inputs: [],
        },
        {
          type: "error",
          name: "UsernameTooLong",
          inputs: [],
        },
      ],
      inheritedFunctions: {},
    },
  },
  11155111: {
    Spotlight: {
      address: "0x4f6cd2d37666d685e635b8c09a81144954429f87",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "_owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "_rtpContract",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "PAYWALL_COST",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "acceptPurchase",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "_purchaser",
              type: "address",
              internalType: "address",
            },
            {
              name: "_content",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "addComment",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "_content",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "createPost",
          inputs: [
            {
              name: "_title",
              type: "string",
              internalType: "string",
            },
            {
              name: "_content",
              type: "string",
              internalType: "string",
            },
            {
              name: "_nonce",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "_sig",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "_paywalled",
              type: "bool",
              internalType: "bool",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "declinePurchase",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "_purchaser",
              type: "address",
              internalType: "address payable",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "deletePost",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "deleteProfile",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "downvote",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "downvotedBy",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "_addr",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "editPost",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "newContent",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "getComments",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple[]",
              internalType: "struct PostLib.Comment[]",
              components: [
                {
                  name: "commenter",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "content",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "createdAt",
                  type: "uint256",
                  internalType: "uint256",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getCommunityPosts",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "tuple[]",
              internalType: "struct PostLib.Post[]",
              components: [
                {
                  name: "creator",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "title",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "content",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "id",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "signature",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "paywalled",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "nonce",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "createdAt",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "lastUpdatedAt",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "upvoteCount",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "downvoteCount",
                  type: "uint256",
                  internalType: "uint256",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPendingPurchases",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "tuple[]",
              internalType: "struct Posts.PendingPurchase[]",
              components: [
                {
                  name: "purchaser",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "postId",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "pubkey",
                  type: "string",
                  internalType: "string",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPost",
          inputs: [
            {
              name: "_post_sig",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct PostLib.Post",
              components: [
                {
                  name: "creator",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "title",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "content",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "id",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "signature",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "paywalled",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "nonce",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "createdAt",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "lastUpdatedAt",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "upvoteCount",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "downvoteCount",
                  type: "uint256",
                  internalType: "uint256",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPostsOfAddress",
          inputs: [
            {
              name: "_addr",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple[]",
              internalType: "struct PostLib.Post[]",
              components: [
                {
                  name: "creator",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "title",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "content",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "id",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "signature",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "paywalled",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "nonce",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "createdAt",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "lastUpdatedAt",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "upvoteCount",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "downvoteCount",
                  type: "uint256",
                  internalType: "uint256",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getProfile",
          inputs: [
            {
              name: "a",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct Spotlight.Profile",
              components: [
                {
                  name: "username",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "avatarCID",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "reputation",
                  type: "uint256",
                  internalType: "uint256",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPurchasedPost",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct PostLib.Post",
              components: [
                {
                  name: "creator",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "title",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "content",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "id",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "signature",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "paywalled",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "nonce",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "createdAt",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "lastUpdatedAt",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "upvoteCount",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "downvoteCount",
                  type: "uint256",
                  internalType: "uint256",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isPurchasePending",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isRegistered",
          inputs: [
            {
              name: "a",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "purchasePost",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "_pubkey",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "payable",
        },
        {
          type: "function",
          name: "registerProfile",
          inputs: [
            {
              name: "_username",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "updateAvatarCID",
          inputs: [
            {
              name: "_cid",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "updateUsername",
          inputs: [
            {
              name: "_newUsername",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "upvote",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "upvotedBy",
          inputs: [
            {
              name: "_id",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "_addr",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "event",
          name: "CommentAdded",
          inputs: [
            {
              name: "commenter",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "postId",
              type: "bytes",
              indexed: true,
              internalType: "bytes",
            },
            {
              name: "content",
              type: "string",
              indexed: false,
              internalType: "string",
            },
            {
              name: "createdAt",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "PostCreated",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "id",
              type: "bytes",
              indexed: true,
              internalType: "bytes",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "PostDeleted",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "id",
              type: "bytes",
              indexed: true,
              internalType: "bytes",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "PostDownvoted",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "id",
              type: "bytes",
              indexed: true,
              internalType: "bytes",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "PostEdited",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "id",
              type: "bytes",
              indexed: true,
              internalType: "bytes",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "PostPurchased",
          inputs: [
            {
              name: "purchaser",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "postId",
              type: "bytes",
              indexed: true,
              internalType: "bytes",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "PostUpvoted",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "id",
              type: "bytes",
              indexed: true,
              internalType: "bytes",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ProfileDeleted",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ProfileRegistered",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "username",
              type: "string",
              indexed: false,
              internalType: "string",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ProfileUpdated",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "newUsername",
              type: "string",
              indexed: false,
              internalType: "string",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "AddressNotRegistered",
          inputs: [],
        },
        {
          type: "error",
          name: "AlreadyDownvoted",
          inputs: [],
        },
        {
          type: "error",
          name: "AlreadyVoted",
          inputs: [],
        },
        {
          type: "error",
          name: "AvatarCIDCannotBeEmpty",
          inputs: [],
        },
        {
          type: "error",
          name: "CannotIssueToZeroAddress",
          inputs: [],
        },
        {
          type: "error",
          name: "CommentCannotBeEmpty",
          inputs: [],
        },
        {
          type: "error",
          name: "ContentCannotBeEmpty",
          inputs: [],
        },
        {
          type: "error",
          name: "CreatorCannotPayForOwnContent",
          inputs: [],
        },
        {
          type: "error",
          name: "InsufficentPostFunds",
          inputs: [],
        },
        {
          type: "error",
          name: "InvalidSignature",
          inputs: [],
        },
        {
          type: "error",
          name: "NoPendingPurchaseFound",
          inputs: [],
        },
        {
          type: "error",
          name: "OnlyCreatorCanAcceptPurchase",
          inputs: [],
        },
        {
          type: "error",
          name: "OnlyCreatorCanEdit",
          inputs: [],
        },
        {
          type: "error",
          name: "OnlyCreatorOrPurchaserCanDeclinePurchase",
          inputs: [],
        },
        {
          type: "error",
          name: "OnlySpotlightCanManagePosts",
          inputs: [],
        },
        {
          type: "error",
          name: "OnlySpotlightContractCanBurnTokens",
          inputs: [],
        },
        {
          type: "error",
          name: "OnlySpotlightContractCanIssueTokens",
          inputs: [],
        },
        {
          type: "error",
          name: "PostAlreadyPurchased",
          inputs: [],
        },
        {
          type: "error",
          name: "PostCreatorCannotBeZero",
          inputs: [],
        },
        {
          type: "error",
          name: "PostNotFound",
          inputs: [],
        },
        {
          type: "error",
          name: "PostNotPaywalled",
          inputs: [],
        },
        {
          type: "error",
          name: "ProfileAlreadyExist",
          inputs: [],
        },
        {
          type: "error",
          name: "ProfileNotExist",
          inputs: [],
        },
        {
          type: "error",
          name: "ReentrancyGuardReentrantCall",
          inputs: [],
        },
        {
          type: "error",
          name: "ReputationAddressCannotBeZero",
          inputs: [],
        },
        {
          type: "error",
          name: "SpotlightAddressCannotBeZero",
          inputs: [],
        },
        {
          type: "error",
          name: "TitleCannotBeEmpty",
          inputs: [],
        },
        {
          type: "error",
          name: "UsernameCannotBeEmpty",
          inputs: [],
        },
        {
          type: "error",
          name: "UsernameTaken",
          inputs: [],
        },
        {
          type: "error",
          name: "UsernameTooLong",
          inputs: [],
        },
      ],
      inheritedFunctions: {},
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
